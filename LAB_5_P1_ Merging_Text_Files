#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <fcntl.h>
#include <unistd.h>

#define BUFFER_SIZE 1024

int merge_txt_files(const char *output_filename) {
    DIR *dir;
    struct dirent *entry;
    char buffer[BUFFER_SIZE];
    FILE *infile;
    int out_fd;

    // Open the current directory
    dir = opendir(".");
    if (!dir) {
        perror("opendir failed");
        return -1;
    }

    // Open output file (create or truncate)
    out_fd = open(output_filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (out_fd < 0) {
        perror("Failed to open output file");
        closedir(dir);
        return -1;
    }

    // Iterate through files in the directory
    while ((entry = readdir(dir)) != NULL) {
        size_t len = strlen(entry->d_name);
        if (len > 4 && strcmp(entry->d_name + len - 4, ".txt") == 0 && strcmp(entry->d_name, output_filename) != 0) {
            infile = fopen(entry->d_name, "r");
            if (!infile) {
                perror("Failed to open input file");
                continue;
            }

            // Read from txt file and write to output file
            size_t bytes_read;
            while ((bytes_read = fread(buffer, 1, BUFFER_SIZE, infile)) > 0) {
                write(out_fd, buffer, bytes_read);
            }

            fclose(infile);
        }
    }

    closedir(dir);
    return out_fd;
}

// Example usage
int main() {
    int fd = merge_txt_files("merged.txt");
    if (fd >= 0) {
        printf("Merged files into 'merged.txt', file descriptor: %d\n", fd);
        close(fd); // Close it when you're done
    } else {
        printf("Failed to merge files.\n");
    }

    return 0;
}
